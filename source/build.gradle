File configFile = new File("D:/build/temp.txt")
String ciFlag;
if (configFile.exists()) {
	ciFlag = configFile.getText();
}
if ("Y" == ciFlag) {
	ext.tempDir = file("$project.projectDir/../../../../../..").absolutePath
	ext.esdkSrcRootDir = file("$tempDir/eSDK_Platform_V1R5_Server/code/current").absolutePath

	apply from: "$tempDir/eSDK_Platform_V1R5_Server/code/current/eSDK_Platform_V100R005/Server/source/esdk_tools/release_package/common_methods.gradle"

	allprojects {
		apply from: "$tempDir/eSDK_Platform_V1R5_Server/code/current/eSDK_Platform_V100R005/Server/source/esdk_tools/release_package/common_allprojects.gradle"
	}
	subprojects {
		apply from: "$tempDir/eSDK_Platform_V1R5_Server/code/current/eSDK_Platform_V100R005/Server/source/esdk_tools/release_package/common_subprojects.gradle"
	
		repositories {
			flatDir { dirs "$tempDir/eSDK_UC_V1R5_Server/code/current/eSDK_UC_V100R005/Server/open_src" }
			flatDir { dirs "$tempDir/eSDK_UC_V1R5_Server/code/current/eSDK_UC_V100R005/Server/platform" }
		}
	}
} else {
	ext.esdkSrcRootDir = file("$project.projectDir/../../..").absolutePath

	apply from: "$esdkSrcRootDir/eSDK_Platform_V100R005/Server/source/esdk_tools/release_package/common_methods.gradle"

	allprojects {
		apply from: "$esdkSrcRootDir/eSDK_Platform_V100R005/Server/source/esdk_tools/release_package/common_allprojects.gradle"
	}
	subprojects {
		apply from: "$esdkSrcRootDir/eSDK_Platform_V100R005/Server/source/esdk_tools/release_package/common_subprojects.gradle"
		repositories {
			flatDir { dirs "$esdkSrcRootDir/eSDK_UC_V100R005/Server/open_src" }
		}
	}	
}

def addDependentProject(proj, cfg, jarOrProjName) {
	if (proj.rootProject.findProject(jarOrProjName) != null) {
		 proj.dependencies.add(cfg, this.project(":$jarOrProjName"))
	} else {
		proj.dependencies.add(cfg, ":$jarOrProjName")
	}
}

task cleanUCPackage(type:Delete) {
	ext.tempDir = "esdk_uc_2.2"
	def dirList = []
	project.fileTree(ext.tempDir).visit {element ->
		dirList.push "$ext.tempDir/$element.path"
	}	
	dirList.reverseEach { String dirName ->
		delete project.file(dirName)
	}
}
task preBuildUCProject() << {
	tasks["cleanUCPackage"].execute()
}

task makeUCProductPackage << {
	FileTree uc22Tree = fileTree(".") {
		include "**/esdk_uc*/build/distributions/*.zip"
		exclude "**/esdk_uc*/build/distributions/*api_parlayx.zip"
		exclude "**/esdk_uc*/build/distributions/*api_prof.zip"
		exclude "**/esdk_uc*/build/distributions/*uc_neadp_v200r001c02.zip"
		exclude "**/esdk_uc*/build/distributions/*uc_neadp_v200r001c03.zip"
		exclude "**/esdk_uc*/build/distributions/*uc_neadp_v200r001c03l.zip"
	}
	uc22Tree.each {File f ->
		copy {
			println("->Copy file: " + f.name);
			from f
			into project.file('esdk_uc_2.2')
		}
	}
}
task buildProduct << {
	tasks["preBuildUCProject"].execute()
	tasks["makeUCProductPackage"].execute()
}

task packageUC22(type:Zip) {
	archiveName = "eSDK_UC2.2_${project.ProductVersion}.zip"
	from project.file("esdk_uc_2.2")
	destinationDir project.file(".")
}
task makePackage() << {
	tasks["packageUC22"].execute()
	tasks["copyPackage2ReleaseDir"].execute()
}